'''
Exploration summary

.We have a dataframe consisting of 9827 rows and 9 columns.
.Our dataset looks a bit tidy with no nans nor duplicated values
.Release_date column needs to be casted into data time and to extract only
 the year value.
.Overview,original_language and poster-url wouldn't be so useful during
 analysis, so we'll drop them.
.There is noticable outliers in popularity column.
.Vote_average better be categorised for proper analysis.
.Genre column has comma seperated values and white spaces that needs to be
 handled and casted into category.'''

import pandas as pd
import matplotlib.pyplot as plt
df=pd.read_csv(r"F:\Data analysis Project\mymoviedb.csv",lineterminator='\n')
#print(df)
#print(df.head())
#print(df.info())
#print(df["Genre"].head())
#print(df.duplicated().sum())
#print(df.describe())

'''Release_date column needs to be casted into data time and to extract only
the year value.'''

df['Release_Date']=pd.to_datetime(df['Release_Date'])
print(df['Release_Date'].dtypes)
df['Release_Date']=df['Release_Date'].dt.year
print(df['Release_Date'].dtypes)
print(df["Release_Date"])

'''Overview,original_language and poster-url wouldn't be so useful during
 analysis, so we'll drop them.'''

cols=["Overview","Original_Language","Poster_Url"]
df.drop(cols,axis=1,inplace=True)
print(df.columns)


'''Vote_average better be categorised for proper analysis'''

def catigorize_col(df,col,labels):
    edges=[df[col].describe()['min'],
           df[col].describe()['25%'],
           df[col].describe()['50%'],
           df[col].describe()['75%'],
           df[col].describe()['max']]
    df[col]=pd.cut(df[col],edges,labels=labels,duplicates='drop')
    return df
labels=['not_popular','below_avg','average','popular']
catigorize_col(df,'Vote_Average',labels)
print(df['Vote_Average'].unique())
print(df["Vote_Average"])
#df.dropna(inplace=True)
#print(df.isna().sum())

'''Genre column has comma seperated values and white spaces that needs to be
handled and casted into category.'''

df["Genre"]=df["Genre"].str.split(', ')
df=df.explode("Genre").reset_index(drop=True)
print(df["Genre"])
df["Genre"]=df["Genre"].astype("category")
print(df["Genre"].dtypes)
print(df["Genre"])

#Data Visualization

#What is the most frequent genre of movies released on Netflix?
'''category_counts = df['Genre'].value_counts()
print(category_counts)

genres = ['Drama', 'Comedy', 'Action', 'Thriller', 'Adventure', 'Romance', 'Horror', 'Animation', 'Family', 
          'Fantasy', 'Science Fiction', 'Crime', 'Mystery', 'History', 'War', 'Music', 'Documentary', 'TV Movie', 'Western']
counts = [3744, 3031, 2686, 2488, 1853, 1476, 1470, 1439, 1414, 1308, 1273, 1242, 773, 427, 308, 295, 215, 214, 137]

plt.figure(figsize=(10, 6))
plt.barh(genres, counts, color='skyblue')
plt.xlabel('Count')
plt.title('Count of Movies by Genre')

plt.tight_layout()
plt.show()'''

#2. What genres has highest votes?
'''category_counts = df['Vote_Average'].value_counts()
print(category_counts)

categories = ['Average', 'Popular', 'Below Avg', 'Not Popular']
counts = [6613, 6520, 6348, 6071]

plt.figure(figsize=(8, 6))
plt.barh(categories, counts, color='lightgreen')

plt.xlabel('Count')
plt.title('Movie Categories by Count')

plt.tight_layout()
plt.show()'''

#3.What movie got the highest popularity? what's its genre?
print(df[df["Popularity"]==df["Popularity"].max()])
#4.What movie got the Lowest popularity? what's its genre?
print(df[df["Popularity"]==df["Popularity"].min()])
#5.Which year has the most filmed movies?
df['Release_Date'].hist()
plt.title("Release Date column distribution")
plt.show()



























